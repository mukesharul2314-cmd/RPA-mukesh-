version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:15-3.3
    container_name: disaster_postgres
    environment:
      POSTGRES_DB: disaster_analytics
      POSTGRES_USER: disaster_user
      POSTGRES_PASSWORD: disaster_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - disaster_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U disaster_user -d disaster_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: disaster_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - disaster_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: disaster_app
    environment:
      - DATABASE_URL=postgresql://disaster_user:disaster_password@postgres:5432/disaster_analytics
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=false
      - ENVIRONMENT=production
      - ENABLE_DATA_COLLECTION=true
      - ENABLE_ALERT_MONITORING=true
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - disaster_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: disaster_worker
    command: celery -A src.tasks.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://disaster_user:disaster_password@postgres:5432/disaster_analytics
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - disaster_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: disaster_scheduler
    command: celery -A src.tasks.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://disaster_user:disaster_password@postgres:5432/disaster_analytics
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - disaster_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: disaster_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./src/dashboard:/usr/share/nginx/html/dashboard
      - ./ssl:/etc/nginx/ssl
    networks:
      - disaster_network
    depends_on:
      - app
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: disaster_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - disaster_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: disaster_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - disaster_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  disaster_network:
    driver: bridge
